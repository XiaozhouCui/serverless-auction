service: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters # some values such as region can be replaced with variables #{AWS::Region}

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'} # 'dev' is the default value for stage if undefined
  region: ap-southeast-2
  environment:
    # env variable to be used in javascript
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM} # allow picture upload

# Service's key resources: DynamoDB, S3, S3-Policy
resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events: # trigger the lambda function
      - http:
          method: POST
          path: /auction
          # protect api with auth-service lambda (refer to custom varialbe "authorizer")
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuction: # get auction by id
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer}

  placeBid: # bid is a property in auction
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer}

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/picture
          authorizer: ${self:custom.authorizer}

  processAuctions: # find ended auctions and close them
    handler: src/handlers/processAuctions.handler
    # events: # if not scheduled, then need to manually invoke the lambda
    #   - schedule: rate(30 minutes) # run this lambda every 30 minutes

# custom variables
custom:
  # ${self:provider.stage} = "dev", #{AWS::Region} = "ap-southeast-2", #{AWS::AccountId} = 651*********
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    # "!Ref AuctionsTable" will be replaced by the DynamoDB table name
    name: !Ref AuctionsTable # AuctionsTable here is the logic ref name
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    # get arn and url from CloudFormation (cf)
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    # add S3 bucket to store image
    name: auctions-bucket-joecui-${self:provider.stage} # name must be unique on AWS
  bundle:
    linting: false #disable linting for development only
